Compilers and Interpreters

 are both software for converting high-level programming languages into machine language or Binary that the computer understands. The Compiler and Interpreter perform the same function but the difference lies in how they carry out this function.

Compilers are software that take an entire source code of a high-level language and convert it all at once into machine language before the program runs.

Key Traits of a Compiler:
 â€¢ It generates an executable file that can be run independently
 â€¢ It leads to faster execution time because the program is already translated
 â€¢ It detects errors during translation and reports them before execution
 â€¢ It requires less memory during execution because the program is pre-translated
 â€¢ It is built with the CPU's architecture in mind, making it less portable
 â€¢ It's used in applications where performance and speed is very important like gaming engines, operating systems, and of course hacking ðŸŒš
 â€¢ Examples of Programming languages that are compiled are C++, C, Rust, Fortran, Go and Swift.

Interpreters are software that takes an entire source code written in high level language and translates it line by line into machine language while executing the program simultaneously.
 
Key Traits of an Interpreter:
 â€¢ It doesn't generate a separate executable file
 â€¢ It has slower execution time compared to the Compiler because translation and execution happen simultaneously
 â€¢ It detects errors line by line and reports them as they're encountered
 â€¢ It requires more memory as it needs to store the source code and execute real-time translation
 â€¢ It's built to be platform independent and can run on different systems provided the correct interpreter is installed
 â€¢ It's used in applications where debugging and rapid development are important and for applications where portability is essential.
 â€¢ Examples of Programming languages that are interpreted are Python, JavaScript, MATLAB, PHP, Bash and Ruby.
